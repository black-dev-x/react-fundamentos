{"version":3,"sources":["template/PageHeader.js","template/Grid.js","template/IconButton.js","todo/TodoForm.js","todo/TodoList.js","todo/Todo.js","about/About.js","routes/Routes.js","template/Menu.js","serviceWorker.js","index.js","App.js"],"names":["props","className","name","small","gridClasses","numbers","cols","split","classes","toCssClasses","children","hidden","type","onClick","icon","role","Grid","id","placeholder","value","description","onChange","e","changeDescription","target","IconButton","handleAdd","list","map","todo","key","initialState","todoList","_","useState","state","setState","PageHeader","TodoForm","newState","newTodoList","TodoList","path","component","Todo","About","href","Boolean","window","location","hostname","match","ReactDOM","render","Menu","Routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAEe,WAAAA,GAAK,OAClB,4BAAQC,UAAU,eAChB,4BACGD,EAAME,KADT,IACe,+BAAQF,EAAMG,UCHlB,WAAAH,GACb,IASMI,EATe,SAAAC,GACnB,IAAMC,EAAOD,EAAUA,EAAQE,MAAM,KAAO,GACxCC,EAAU,GAKd,OAJIF,EAAK,KAAIE,GAAO,iBAAcF,EAAK,GAAnB,MAChBA,EAAK,KAAIE,GAAO,iBAAcF,EAAK,GAAnB,MAChBA,EAAK,KAAIE,GAAO,iBAAcF,EAAK,GAAnB,MAChBA,EAAK,KAAIE,GAAO,iBAAcF,EAAK,GAAnB,MACbE,EAEWC,CAAaT,EAAMM,MAAQ,eAC/C,OAAO,yBAAKL,UAAWG,GAAcJ,EAAMU,WCX9B,WAAAV,GACb,OAAIA,EAAMW,OAAe,KAGrB,4BAAQV,UAAW,WAAaD,EAAMY,KAAMC,QAASb,EAAMa,SACzD,uBAAGZ,UAAW,SAAWD,EAAMc,SCHxB,WAAAd,GAAK,OAClB,yBAAKC,UAAU,WAAWc,KAAK,QAC7B,kBAACC,EAAD,CAAMV,KAAK,WACT,2BAAOW,GAAG,cAAchB,UAAU,eAChCiB,YAAY,sBAAsBC,MAAOnB,EAAMoB,YAC/CC,SAAU,SAACC,GAAD,OAAOtB,EAAMuB,kBAAkBD,EAAEE,OAAOL,WAEtD,kBAACH,EAAD,CAAMV,KAAK,UACT,kBAACmB,EAAD,CAAYb,KAAK,UAAUE,KAAK,OAAOD,QAASb,EAAM0B,eCV7C,WAAA1B,GAAK,OAClB,6BACGA,EAAM2B,KAAKC,KAAI,SAAAC,GAAI,OAAI,wBAAIC,IAAKD,GAAOA,QCCtCE,EAAe,CACnBX,YAAa,GACbY,SAAU,IAEG,WAAAC,GAAM,IAAD,EACQC,mBAASH,GADjB,mBACXI,EADW,KACJC,EADI,KAgBlB,OACE,6BACE,kBAACC,EAAD,CAAYnC,KAAK,UAAUC,MAAM,aACjC,kBAACmC,EAAD,CAAUZ,UAhBI,WAChB,IAAMa,EAAQ,eAAQJ,GAChBK,EAAW,sBAAOL,EAAMH,UAAb,CAAuBG,EAAMf,cAC9CmB,EAASnB,YAAc,GACvBmB,EAASP,SAAWQ,EACpBJ,EAASG,IAWyBnB,YAAae,EAAMf,YAAaG,kBAT1C,SAACH,GACzB,IAAMmB,EAAQ,eAAQJ,GACtBI,EAASnB,YAAcA,EACvBgB,EAASG,MAOP,kBAACE,EAAD,CAAUd,KAAMQ,EAAMH,aC1Bb,WAAAC,GAAC,OACd,6BACE,kBAACI,EAAD,CAAYnC,KAAK,QAAQC,MAAM,WAC/B,iDACA,4DACA,oDACA,4DACA,wCACA,8DCNW,WAAA8B,GAAC,OACd,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,IAChC,kBAAC,IAAD,CAAOF,UAAWC,OCRT,G,MAAA,SAAAX,GAAC,OACd,yBAAKhC,UAAU,oCACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,eAAe6C,KAAK,KAC/B,uBAAG7C,UAAU,2BADf,YAKF,yBAAKgB,GAAG,SAAShB,UAAU,4BACzB,wBAAIA,UAAU,kBACZ,4BACE,uBAAG6C,KAAK,UAAR,YAEF,4BACE,uBAAGA,KAAK,UAAR,gBCLQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,mBCHD,SAAApB,GACb,OACE,yBAAKhC,UAAU,aACb,kBAACqD,EAAD,MACA,kBAACC,EAAD,SDDU,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.324b8ea7.chunk.js","sourcesContent":["import React from 'react'\n\nexport default props => (\n  <header className='page-header'>\n    <h2>\n      {props.name} <small>{props.small}</small>\n    </h2>\n  </header>\n)\n","import React from 'react'\n\nexport default props => {\n  const toCssClasses = numbers => {\n    const cols = numbers ? numbers.split(' ') : []\n    let classes = ''\n    if (cols[0]) classes += `col-xs-${cols[0]} `\n    if (cols[1]) classes += `col-sm-${cols[1]} `\n    if (cols[2]) classes += `col-md-${cols[2]} `\n    if (cols[3]) classes += `col-lg-${cols[3]} `\n    return classes\n  }\n  const gridClasses = toCssClasses(props.cols || '12 12 12 12')\n  return <div className={gridClasses}>{props.children}</div>\n}\n","import React from 'react'\n\nexport default props => {\n  if (props.hidden) return null\n  else\n    return (\n      <button className={'btn btn-' + props.type} onClick={props.onClick}>\n        <i className={'fa fa-' + props.icon}></i>\n      </button>\n    )\n}\n","import React from 'react';\nimport Grid from '../template/Grid';\nimport IconButton from '../template/IconButton';\n\nexport default props => (\n  <div className='todoForm' role='form'>\n    <Grid cols='12 9 10'>\n      <input id='description' className='form-control'\n        placeholder='Adicione uma tarefa' value={props.description}\n        onChange={(e) => props.changeDescription(e.target.value)}></input>\n    </Grid>\n    <Grid cols='12 3 2'>\n      <IconButton type='primary' icon='plus' onClick={props.handleAdd}></IconButton>\n    </Grid>\n  </div>\n);\n","import React from 'react';\n\nexport default props => (\n  <div>\n    {props.list.map(todo => <h1 key={todo}>{todo}</h1>)}\n  </div>\n);\n","import React, { useState } from 'react';\nimport PageHeader from '../template/PageHeader';\nimport TodoForm from './TodoForm';\nimport TodoList from './TodoList';\n\nconst initialState = {\n  description: '',\n  todoList: []\n};\nexport default _ => {\n  const [state, setState] = useState(initialState);\n\n  const handleAdd = () => {\n    const newState = { ...state };\n    const newTodoList = [...state.todoList, state.description];\n    newState.description = '';\n    newState.todoList = newTodoList;\n    setState(newState);\n  };\n  const changeDescription = (description) => {\n    const newState = { ...state };\n    newState.description = description;\n    setState(newState);\n  };\n\n  return (\n    <div>\n      <PageHeader name='tarefas' small='cadastro'></PageHeader>\n      <TodoForm handleAdd={handleAdd} description={state.description} changeDescription={changeDescription}></TodoForm>\n      <TodoList list={state.todoList}></TodoList>\n    </div>\n  );\n};\n","import React from 'react'\nimport PageHeader from '../template/PageHeader'\n\nexport default _ => (\n  <div>\n    <PageHeader name='sobre' small='n처s'></PageHeader>\n    <h2>Nossa hist처ria</h2>\n    <p>Lorem ipsum dolor sit amet...</p>\n    <h2>Miss찾o e Vis찾o</h2>\n    <p>Lorem ipsum dolor sit amet...</p>\n    <h2>Imprensa</h2>\n    <p>Lorem ipsum dolor sit amet...</p>\n  </div>\n)\n","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Todo from '../todo/Todo'\nimport About from '../about/About'\n\nexport default _ => (\n  <BrowserRouter>\n    <Switch>\n      <Route path='/todos' component={Todo}></Route>\n      <Route path='/about' component={About}></Route>\n      <Route component={Todo}></Route>\n    </Switch>\n  </BrowserRouter>\n)\n","import React from 'react'\n\nexport default _ => (\n  <nav className='navbar navbar-inverse bg-inverse'>\n    <div className='container'>\n      <div className='navbar-header'>\n        <a className='navbar-brand' href='/'>\n          <i className='fa fa-calendar-check-o'></i>TodoApp\n        </a>\n      </div>\n\n      <div id='navbar' className='navbar-collapse collapse'>\n        <ul className='nav navbar-nav'>\n          <li>\n            <a href='/todos'>Tarefas</a>\n          </li>\n          <li>\n            <a href='/about'>Sobre</a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </nav>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from 'react';\nimport Routes from './routes/Routes';\nimport './App.css';\nimport Menu from './template/Menu';\n\nexport default _ => {\n  return (\n    <div className='container'>\n      <Menu></Menu>\n      <Routes></Routes>\n    </div>\n  );\n};\n"],"sourceRoot":""}